// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Student
  Professor
}

enum Difficulty {
  Beginner
  Intermediate
  Advanced
}

// User model
model User {
  id                   String  @id @default(uuid())
  name                 String
  email                String  @unique
  passwordHash         String
  birthdate            String
  city                 String
  occupation           String
  role                 Role    @default(Student)
  accountDeactivated   Boolean @default(false)

  resetToken           String?   @unique
  resetTokenExpiration DateTime?
  resetRequestedAt     DateTime?

  confirmationCode     String?
  accountVerified      Boolean @default(false)

  studentStats         StudentStats?
  ProfessorStats       ProfessorStats?

  classroomsCreated    Classroom[]        @relation("UserClassrooms")
  enrollments          Enrollment[]
  submissions          Submission[]
  leaderboard          Leaderboard[]
  marathonProgress     MarathonProgress[]
}

// Student-specific stats
model StudentStats {
  userId                 String @id
  user                   User   @relation(fields: [userId], references: [id])
  total_points           Int    @default(0)
  marathons_participated Int    @default(0)
  podiums                Int    @default(0)
  first_places           Int    @default(0)
}

// Professor-specific stats
model ProfessorStats {
  userId                 String @id
  user                   User   @relation(fields: [userId], references: [id])
  total_classes          Int    @default(0)
  total_marathons        Int    @default(0)
  total_students_reached Int    @default(0)
}

// Classroom
model Classroom {
  id                String    @id @default(cuid())
  name              String
  invite_expiration DateTime?
  created_at        DateTime  @default(now())
  created_by        String
  creator           User      @relation("UserClassrooms", fields: [created_by], references: [id])

  marathons LanguageMarathon[]
}

// Language Marathon
model LanguageMarathon {
  id                    String     @id @default(cuid())
  code                  String     @unique
  title                 String
  description           String?
  context               String
  difficulty            Difficulty
  timeLimit             Int
  start_date            DateTime   @default(now())
  end_date              DateTime?
  number_of_questions   Int
  leaderboard_generated Boolean    @default(false)

  classroom_id String
  classroom    Classroom @relation(fields: [classroom_id], references: [id])
  created_by   String

  questions   Question[]
  submissions Submission[]
  enrollments Enrollment[]
  leaderboard Leaderboard[]
  AiFeedbacks AiFeedbacks[]
  Report      Report?
  progress    MarathonProgress[]
}

model MarathonProgress {
  id                  String    @id @default(uuid())
  user_id             String
  marathon_id         String
  current_question_id Int?
  draft_answer        String
  started_at          DateTime  @default(now())
  last_updated_at     DateTime  @updatedAt
  completed           Boolean   @default(false)
  completed_at        DateTime?

  user     User             @relation(fields: [user_id], references: [id])
  marathon LanguageMarathon @relation(fields: [marathon_id], references: [id])

  @@unique([user_id, marathon_id])
  @@index([marathon_id])
  @@index([user_id])
}

// Question
model Question {
  id          Int     @id @default(autoincrement())
  marathon_id String
  title       String?
  prompt_text String

  marathon    LanguageMarathon @relation(fields: [marathon_id], references: [id])
  submissions Submission[]
}

// Submission
model Submission {
  id               String   @id @default(cuid())
  marathon_id      String
  question_id      Int
  user_id          String
  answer           String
  submitted_at     DateTime @default(now())
  corrected_by_ai  Boolean  @default(false)
  corrected_answer String?
  score            Float?

  marathon LanguageMarathon @relation(fields: [marathon_id], references: [id])
  question Question         @relation(fields: [question_id], references: [id])
  user     User             @relation(fields: [user_id], references: [id])

  AiFeedbacks AiFeedbacks[]
}

model AiFeedbacks {
  id              Int    @id @default(autoincrement())
  submissionId    String
  explanation     String
  points_deducted Int
  marathon_id     String
  category        String

  submission Submission       @relation(fields: [submissionId], references: [id])
  marathon   LanguageMarathon @relation(fields: [marathon_id], references: [id])
}

// Enrollment
model Enrollment {
  id            String   @id @default(uuid())
  user_id       String
  marathon_id   String
  marathon_code String
  created_at    DateTime @default(now())

  user     User             @relation(fields: [user_id], references: [id])
  marathon LanguageMarathon @relation(fields: [marathon_id], references: [id])
}

// Leaderboard
model Leaderboard {
  id          String @id @default(uuid())
  marathon_id String
  user_id     String
  score       Float
  position    Int

  marathon LanguageMarathon @relation(fields: [marathon_id], references: [id])
  user     User             @relation(fields: [user_id], references: [id])

  @@unique([marathon_id, user_id])
}

// Report
model Report {
  id             String          @id @default(uuid())
  classroom_name String
  marathon_id    String          @unique
  total_errors   Int
  created_at     DateTime        @default(now())
  report_details ReportDetails[]

  marathon LanguageMarathon @relation(fields: [marathon_id], references: [id])
}

model ReportDetails {
  id              Int    @id @default(autoincrement())
  report_id       String
  occurrences     Int
  category_name   String
  examples        String
  targeted_advice String

  report Report @relation(fields: [report_id], references: [id])
}
