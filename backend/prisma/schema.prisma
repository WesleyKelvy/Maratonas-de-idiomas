// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Student
  Professor
}

enum Difficulty {
  Beginner
  Intermediate
  Advanced
}

// User model
model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  passwordHash String
  birthdate    String
  city         String
  occupation   String
  role         Role     @default(Student)
  
  resetToken           String?    @unique
  resetTokenExpiration DateTime?

  studentStats StudentStats?
  ProfessorStats ProfessorStats?

  classroomsCreated Classroom[]        @relation("UserClassrooms")
  enrollments       Enrollment[]
  submissions       Submission[]
  leaderboard       Leaderboard[]
}

// Student-specific stats
model StudentStats {
  userId                 String @id 
  user                   User   @relation(fields: [userId], references: [id])
  total_points           Int    @default(0)
  marathons_participated Int    @default(0)
  podiums                Int    @default(0)
  first_places           Int    @default(0)
}

// Professor-specific stats
model ProfessorStats {
  userId                 String @id 
  user                   User   @relation(fields: [userId], references: [id])
  total_classes          Int    @default(0)
  total_marathons        Int    @default(0)
  total_students_reached Int    @default(0)
}

// Classroom
model Classroom {
  code              String    @id
  name              String
  invite_expiration DateTime?
  created_at        DateTime  @default(now())
  created_by        String
  creator    User   @relation("UserClassrooms", fields: [created_by], references: [id])

  marathons LanguageMarathon[]
}

// Language Marathon
model LanguageMarathon {
  id          String   @id @default(cuid())
  title       String
  description String?
  context     String
  difficulty  Difficulty
  timeLimit   Int
  start_date  DateTime @default(now())
  end_date    DateTime?
  number_of_questions Int

  classroom_code String 

  classroom Classroom @relation(fields: [classroom_code], references: [code])

  questions   Question[]
  enrollments Enrollment[]
  leaderboard Leaderboard[]
}

// Question
model Question {
  id          Int @id @default(autoincrement())
  marathon_id String
  title       String?
  prompt_text String

  marathon    LanguageMarathon @relation(fields: [marathon_id], references: [id])
  submissions Submission[]
}

// Submission
model Submission {
  id              String   @id @default(uuid())
  question_id     Int
  user_id         String
  answer          String
  submitted_at    DateTime @default(now())
  ai_feedback     String?
  score           Float?
  corrected_by_ai Boolean  @default(true)

  question Question @relation(fields: [question_id], references: [id])
  user     User     @relation(fields: [user_id], references: [id])
}

// Enrollment
model Enrollment {
  id          String @id @default(uuid())
  user_id     String
  marathon_id String

  user     User             @relation(fields: [user_id], references: [id])
  marathon LanguageMarathon @relation(fields: [marathon_id], references: [id])
}

// Leaderboard
model Leaderboard {
  id          String @id @default(uuid())
  marathon_id String
  user_id     String
  score       Float
  position    Int

  marathon LanguageMarathon @relation(fields: [marathon_id], references: [id])
  user     User             @relation(fields: [user_id], references: [id])

  @@unique([marathon_id, user_id])
}
